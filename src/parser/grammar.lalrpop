use std::str::FromStr;
use crate::parser::ast::{Node,Expr};
use crate::ast::{Type,Value,UnOp,BinOp};

grammar;

//  __  __                          
// |  \/  | __ _  ___ _ __ ___  ___ 
// | |\/| |/ _` |/ __| '__/ _ \/ __|
// | |  | | (_| | (__| | | (_) \__ \
// |_|  |_|\__,_|\___|_|  \___/|___/


Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

CommaOpt<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SemiCol<T>: Vec<T> = { 
    <v:(<T> ";")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

//  ___    _            _   
// |_ _|__| | ___ _ __ | |_ 
//  | |/ _` |/ _ \ '_ \| __|
//  | | (_| |  __/ | | | |_ 
// |___\__,_|\___|_| |_|\__|

Ident: String = {
    r"[a-zA-Z][a-zA-Z0-9_]*" => <>.to_owned() 
}

//  _____                 
// |_   _|   _ _ __   ___ 
//   | || | | | '_ \ / _ \
//   | || |_| | |_) |  __/
//   |_| \__, | .__/ \___|
//       |___/|_|         

Type: Type = {
    "int" => Type::Int,
    "real" => Type::Real,
    "bool" => Type::Bool,
}

//  _____ _ _      
// |  ___(_) | ___ 
// | |_  | | |/ _ \
// |  _| | | |  __/
// |_|   |_|_|\___|

pub File: Vec<Node> = {
    <n:(Node)*> => n
}

//  _   _           _     
// | \ | | ___   __| | ___
// |  \| |/ _ \ / _` |/ _ \
// | |\  | (_) | (_| |  __/
// |_| \_|\___/ \__,_|\___|

Node: Node = {
    "node" <i:Ident> "(" <ip:InParams> ")"
    "returns" "(" <op:ParamList> ")" ";"
    <lp:LocalParams> "let" <el:Eq+> "tel" ";"? => {
        let flatten = |v:Vec<(Vec<String>,Type)>| {
            let mut vp = vec![];
            for sub_v in v {
                let t = sub_v.1;
                for name in sub_v.0 {
                    vp.push((name,t.clone()));
                }
            }
            vp
        };
        let ip = flatten(ip);
        let op = flatten(op);
        let lp = flatten(lp);
        Node{name:i, in_params:ip, out_params:op, local_params:lp, eq_list:el}
    }
}

LocalParams: Vec<(Vec<String>, Type)> = {
    "var" <ParamListSemiCol> => <>,
    () => vec![],
}

InParams: Vec<(Vec<String>, Type)> = {
    <pl:ParamList?> => { if let Some(t) = pl {
            t
        } else {
            vec![]
        }
    }
}

ParamListSemiCol: Vec<(Vec<String>, Type)> = {
    <p:(<Param> ";")+> => p
}

ParamList: Vec<(Vec<String>, Type)> = {
    SemiCol<Param> => <>
}

Param: (Vec<String>,Type) = {
    <i:Comma<Ident>> ":" <t:Type> => (i,t)
}

Eq: (Vec<String>, Expr) = {
    <i:Ident> "=" <e:Expr> ";" => (vec![i],e),
    "(" <v:Comma<Ident>> ")" "=" <e:Expr> ";" => (v,e),
}

//  _____                 
// | ____|_  ___ __  _ __ 
// |  _| \ \/ / '_ \| '__|
// | |___ >  <| |_) | |   
// |_____/_/\_\ .__/|_|   
//            |_|         

Expr: Expr = {
    IfThenElse => <>,
}


IfThenElse: Expr = {
    Arrow => <>,
    "if" <i:Expr> "then" <t:Expr> "else" <e:Expr> => Expr::IfThenElse(box i, box t, box e),
}


Arrow: Expr = {
    Impl => <>,
    <l:Impl> "->" <r:Arrow> => Expr::Arrow(box l, box r),
}


Impl: Expr = {
    Or => <>,
    <l:Impl> "=>" <r:Or> => Expr::BinOp(BinOp::Impl, box l, box r),
}


Or: Expr = {
    Xor => <>,
    <l:Or> "or" <r:Xor> => Expr::BinOp(BinOp::Or, box l, box r),
}

Xor: Expr = {
    And => <>,
    <l:Xor> "xor" <r:And> => Expr::BinOp(BinOp::Xor, box l, box r),
}


And: Expr = {
    Comp => <>,
    <l:And> "and" <r:Comp> => Expr::BinOp(BinOp::And, box l, box r),
}


Comp: Expr = {
    Add => <>,
    <l:Comp> "<" <r:Add> => Expr::BinOp(BinOp::Lt, box l, box r),
    <l:Comp> "<=" <r:Add> => Expr::BinOp(BinOp::Le, box l, box r),
    <l:Comp> ">" <r:Add> => Expr::BinOp(BinOp::Gt, box l, box r),
    <l:Comp> ">=" <r:Add> => Expr::BinOp(BinOp::Ge, box l, box r),
    <l:Comp> "<>" <r:Add> => Expr::BinOp(BinOp::Neq, box l, box r),
    <l:Comp> "=" <r:Add> => Expr::BinOp(BinOp::Eq, box l, box r),
}


Add: Expr = {
    Mul => <>,
    <l:Add> "+" <r:Mul> => Expr::BinOp(BinOp::Add, box l, box r),
    <l:Add> "-" <r:Mul> => Expr::BinOp(BinOp::Sub, box l, box r),
}


Mul: Expr = {
    PreNot => <>,
    <l:Mul> "*" <r:PreNot> => Expr::BinOp(BinOp::Mul, box l, box r),
    <l:Mul> "/" <r:PreNot> => Expr::BinOp(BinOp::Div, box l, box r),
    <l:Mul> "div" <r:PreNot> => Expr::BinOp(BinOp::Div, box l, box r),
    <l:Mul> "mod" <r:PreNot> => Expr::BinOp(BinOp::Mod, box l, box r),
}


PreNot: Expr = {
    Value => <>,
    "not" <PreNot> => Expr::UnOp(UnOp::Not, box <>),
    "pre" <PreNot> => Expr::Pre(box <>),
    "-" <PreNot> => Expr::UnOp(UnOp::UMinus, box <>),
}


Value: Expr = {
    "(" <Expr> ")" => <>,
    ConstValue => <>,
    Ident => Expr::Var(<>),
    <i:Ident> "(" <v:CommaOpt<Expr>> ")" => Expr::FunCall(i,v),
}

//   ____                _ __     __    _            
//  / ___|___  _ __  ___| |\ \   / /_ _| |_   _  ___ 
// | |   / _ \| '_ \/ __| __\ \ / / _` | | | | |/ _ \
// | |__| (_) | | | \__ \ |_ \ V / (_| | | |_| |  __/
//  \____\___/|_| |_|___/\__| \_/ \__,_|_|\__,_|\___|


ConstInt: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();

ConstReal: f32 = r"([0-9]+\.[0-9]*([eE][+-]?[0-9]+)?)|([0-9]*\.[0-9]+([eE][+-]?[0-9]+)?)|([0-9]+[eE][+-]?[0-9]+)" => f32::from_str(<>).unwrap();

ConstBool: bool = {
    "true" => true,
    "false" => false,
}

ConstValue: Expr = {
    ConstInt => Expr::Value(Value::Int(<>)),
    ConstReal => Expr::Value(Value::Real(<>)),
    ConstBool => Expr::Value(Value::Bool(<>)),
}
